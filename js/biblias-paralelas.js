//--------------------------------------------------------
//   Funci√≥n para llenar el dropdown de cap√≠tulos
//--------------------------------------------------------
async function fillChaptersForBook(version, libro) {
  if (!urlsLibros[version] || !urlsLibros[version][libro]) {
    console.error(
      `‚ùå El libro "${libro}" no est√° disponible en la versi√≥n ${version}`
    );
    alert(`El libro "${libro}" no est√° disponible en la versi√≥n ${version}.`);
    return false;
  }

  if (!cacheLibros[version][libro]) {
    try {
      const urlJson = urlsLibros[version][libro];
      console.log(`üì• Cargando libro desde JSON: ${urlJson}`);

      const resp = await fetch(urlJson);
      if (!resp.ok)
        throw new Error(`‚ùå Error al cargar ${libro}: ${resp.status}`);

      cacheLibros[version][libro] = await resp.json();
    } catch (error) {
      console.error('üö® Error al obtener los cap√≠tulos:', error);
      alert(`No se pudo cargar el libro "${libro}" en la versi√≥n ${version}.`);
      return false;
    }
  }

  capituloSelect.innerHTML = '';
  const totalCaps = cacheLibros[version][libro].length;

  for (let i = 1; i <= totalCaps; i++) {
    let opt = document.createElement('option');
    opt.value = i;
    opt.textContent = i;
    capituloSelect.appendChild(opt);
  }

  return true;
}

// Funci√≥n para sincronizar versiones (requerida por el bot√≥n Sync)
function sincronizarVersion() {
  if (!window.currentBook || !window.currentChapter) {
    return;
  }

  const versionParalela = document.getElementById('versionSelect').value;
  let libroParalelo = window.currentBook;

  // Mapear los libros seg√∫n la versi√≥n
  if (versionParalela === 'BTX4') {
    // Mapa de conversi√≥n para nombres especiales en BTX4
    const mapaNombres = {
      G√°latas: 'Galatas',
      Santiago: 'Jacobo',
      // A√±adir m√°s mapeos seg√∫n sea necesario
    };

    if (mapaNombres[window.currentBook]) {
      libroParalelo = mapaNombres[window.currentBook];
    }
  }

  // Actualizar los selectores
  document.getElementById('versionSelect').value = versionParalela;
  fillBooksForVersion(versionParalela);

  setTimeout(() => {
    const libroSelect = document.getElementById('libroSelect');

    // Intentar encontrar el libro en la lista
    for (let i = 0; i < libroSelect.options.length; i++) {
      if (libroSelect.options[i].value === libroParalelo) {
        libroSelect.selectedIndex = i;
        libroSelect.value = libroParalelo;
        break;
      }
    }

    // Cargar cap√≠tulos para el libro seleccionado
    fillChaptersForBook(versionParalela, libroParalelo).then(() => {
      setTimeout(() => {
        // Seleccionar el cap√≠tulo
        document.getElementById('capituloSelect').value = window.currentChapter;

        // Cargar el contenido
        document.getElementById('btnCargar').click();
      }, 300);
    });
  }, 300);
}

//--------------------------------------------------------
// 9) "Sincronizar" para alinear con la versi√≥n hebrea
//--------------------------------------------------------
document.getElementById('btnSync').addEventListener('click', async () => {
  if (!currentBook || !currentChapter) {
    alert('No hay un libro/cap√≠tulo activo en la versi√≥n principal.');
    return;
  }

  const versionParalela = document.getElementById('versionSelect').value;

  // üîπ Convertir el nombre del libro si es BTX4
  let libroParalelo = currentBook;

  if (versionParalela === 'BTX4') {
    const libroSinTildes = currentBook
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, ''); // Quitar tildes
    const libroEncontrado = Object.keys(urlsLibros['BTX4']).find(
      (key) => key.toLowerCase() === libroSinTildes.toLowerCase()
    );

    if (libroEncontrado) {
      libroParalelo = libroEncontrado; // Usar el nombre correcto de BTX4
    } else {
      alert(`No se encontr√≥ el libro "${currentBook}" en la versi√≥n BTX4.`);
      return;
    }
  }

  fillBooksForVersion(versionParalela);

  setTimeout(async () => {
    document.getElementById('libroSelect').value = libroParalelo;
    const success = await fillChaptersForBook(versionParalela, libroParalelo);

    if (success) {
      document.getElementById('capituloSelect').value = currentChapter;
      document.getElementById('btnCargar').click();
    } else {
      alert(
        `No se pudo sincronizar ${currentBook} en la versi√≥n ${versionParalela}.`
      );
    }
  }, 300);
});

document.addEventListener('DOMContentLoaded', async () => {
  const versionPorDefecto = 'RVR1960'; // üìå Define la versi√≥n por defecto
  versionSelect.value = versionPorDefecto; // üìå Selecciona autom√°ticamente RVR1960
  fillBooksForVersion(versionPorDefecto); // üìå Llena la lista de libros

  setTimeout(async () => {
    // üìå Si hay un libro predeterminado (por ejemplo, Mateo), carga sus cap√≠tulos
    let primerLibro = Object.keys(urlsLibros[versionPorDefecto])[0];
    if (primerLibro) {
      libroSelect.value = primerLibro;
      await fillChaptersForBook(versionPorDefecto, primerLibro);

      // üìå Seleccionar autom√°ticamente el primer cap√≠tulo si existe
      if (capituloSelect.options.length > 1) {
        capituloSelect.selectedIndex = 1; // Selecciona el primer cap√≠tulo
      }
    }
  }, 500); // üî• Peque√±o retraso para asegurar que la lista de libros cargue primero
});

//--------------------------------------------------------
// Funci√≥n para llenar el dropdown de libros
//--------------------------------------------------------
function fillBooksForVersion(version) {
  libroSelect.innerHTML = '';
  capituloSelect.innerHTML = `<option value="">-- Elige libro primero --</option>`;

  Object.keys(urlsLibros[version]).forEach((libro) => {
    let opt = document.createElement('option');
    opt.value = libro;
    opt.textContent = libro;
    libroSelect.appendChild(opt);
  });

  libroSelect.insertAdjacentHTML(
    'afterbegin',
    `<option value="" disabled selected>-- Elige libro --</option>`
  );
}

//--------------------------------------------------------
// Eventos para cambiar la versi√≥n y el libro
//--------------------------------------------------------
versionSelect.addEventListener('change', () =>
  fillBooksForVersion(versionSelect.value)
);
libroSelect.addEventListener('change', async () => {
  await fillChaptersForBook(versionSelect.value, libroSelect.value);
});

//--------------------------------------------------------
// Bot√≥n "Buscar" para cargar el cap√≠tulo
//--------------------------------------------------------
btnCargar.addEventListener('click', () => {
  const version = versionSelect.value;
  const libro = libroSelect.value;
  const capitulo = parseInt(capituloSelect.value, 10);

  if (!version || !libro || !capitulo) {
    resultadoBibliaParalela.innerHTML = `<p style="color:red;">Selecciona versi√≥n, libro y cap√≠tulo.</p>`;
    return;
  }

  const versos = cacheLibros[version][libro][capitulo - 1];
  let html = `<h5>${libro} ${capitulo} - ${version}</h5><ul>`;
  versos.forEach(
    (texto, idx) => (html += `<li><strong>${idx + 1}.</strong> ${texto}</li>`)
  );
  html += '</ul>';

  resultadoBibliaParalela.innerHTML = html;
});


